# Gold Trading AI - Modern Python Packaging Configuration
# ======================================================

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gold-trading-ai"
version = "2.0.0"
description = "Professional machine learning system for gold trading prediction"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Trading Systems", email = "support@goldtradingai.com"}
]
maintainers = [
    {name = "AI Trading Systems", email = "support@goldtradingai.com"}
]
keywords = [
    "trading",
    "gold", 
    "machine-learning",
    "finance",
    "prediction",
    "ai",
    "ensemble",
    "technical-analysis",
    "bloomberg-terminal",
    "gui"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "xgboost>=1.5.0",
    "lightgbm>=3.3.0",
    "optuna>=3.0.0",
    "TA-Lib>=0.4.24",
    "pandas-ta>=0.3.14b",
    "yfinance>=0.1.87",
    "matplotlib>=3.5.0",
    "requests>=2.28.0",
    "python-dateutil>=2.8.0",
    "pytz>=2022.1",
    "tqdm>=4.64.0",
    "pyyaml>=6.0",
    "joblib>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-mock>=3.8.0",
    "pytest-xdist>=2.5.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "isort>=5.10.0",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0", 
    "pytest-xdist>=2.5.0",
    "pytest-benchmark>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
performance = [
    "numba>=0.56.0",
    "cython>=0.29.0",
]
visualization = [
    "plotly>=5.10.0",
    "seaborn>=0.11.0",
    "bokeh>=2.4.0",
]
web = [
    "flask>=2.2.0",
    "dash>=2.6.0",
    "fastapi>=0.85.0",
]

[project.urls]
Homepage = "https://github.com/your-repo/gold-trading-ai"
Documentation = "https://github.com/your-repo/gold-trading-ai/docs"
Repository = "https://github.com/your-repo/gold-trading-ai"
"Bug Tracker" = "https://github.com/your-repo/gold-trading-ai/issues"
Changelog = "https://github.com/your-repo/gold-trading-ai/blob/main/CHANGELOG.md"

[project.scripts]
gold-trading-ai = "src.cli:main"
gta-train = "src.core.models.trainer:main"
gta-gui = "src.gui.application:main"
gta-setup = "scripts.setup:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md", "*.cfg", "*.ini"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "numpy",
    "pandas", 
    "sklearn",
    "xgboost",
    "lightgbm",
    "optuna",
    "talib",
    "yfinance",
    "matplotlib",
    "tkinter"
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "talib.*",
    "yfinance.*",
    "optuna.*",
    "lightgbm.*",
    "xgboost.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]
